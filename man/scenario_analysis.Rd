% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scenario_analysis.R
\name{scenario_analysis}
\alias{scenario_analysis}
\title{A Function to Perform Scenario Analysis for a Generic Model Object.}
\usage{
scenario_analysis(parameter_df, variable_params = NULL, model = NULL,
  sim_fn = NULL, cores = 1, save = TRUE,
  save_name = "scenario_analysis_results", save_path = NULL,
  save_format = NULL, rerun = FALSE, verbose = FALSE, test = FALSE)
}
\arguments{
\item{parameter_df}{A dataframe of parameter permutations as produced by \code{\link[idmodelr]{generate_parameter_permutations}}.
Using the default options it will save results when run for the first time, and afterwards load them in.}

\item{variable_params}{A character vector containing the names of the paramters that are varied in \code{parameter_df}.}

\item{model}{A model compatible with your \code{sim_fn}. A \code{\link[pomp]{pomp}} model object is
recommended.}

\item{sim_fn}{A generic simulation function, with the first arguement as the model object,
a \code{params} arguement, and a \code{as.data.frame} arguement. Tested to work with \code{trajectory}
and \code{simulate} from the \code{\link[pomp]{pomp}} package.}

\item{cores}{The number of cores to use for the scenario analysis, defaults to 1.}

\item{save}{Logical specifying if the results should be saved. Defaults to \code{TRUE}.}

\item{save_name}{A character string of the name the results should be saved under.}

\item{save_path}{A character string indicating the saving location for the results.
If not specified defaults to saving in the working directory.}

\item{save_format}{If additional file formats are required, see \code{\link[idmodelr]{save_data}}.}

\item{rerun}{A logical indicating if the function should be rerun or saved results should be loaded.
Defaults to \code{FALSE}.}

\item{verbose}{A logical, indicating if progress messages should be printed, defaults to \code{FALSE}.}

\item{test}{A logical (defaults to \code{FALSE}) if \code{TRUE} function uses multicore functionality regardless
of the number of cores specified.}
}
\value{
A tidy dataframe containing simulated model trajectories for each scenario
varied parameter combination. Use \code{\link[tidyr]{unnest}} to examine all simulation results.
}
\description{
This function uses parameter permutations produced by
\code{\link[idmodelr]{generate_parameter_permutations}} to simulate from a supplied model function.
It can be used to examine multiple scenarios, with any number of parameter variations, for multiple samples.
}
\examples{

scenarios <- tibble::data_frame(scenario = c("test_1", "test_2"), scenario_param = c(0, 1))
variable_params <-  tibble::data_frame(variable = c(0, 0.5, 1))
fixed_params <- c(fixed_1 = 2, fixed_2 = c(1, 3, 4))
sample_params <- c(sample_1 = 2, sample_2 = c(2, 1))

parameter_df <- generate_parameter_permutations(variable_params, fixed_params, sample_params,
                                                excluded_params = c("variable"), scenarios,
                                                parameter_samples = 10, save = FALSE)

## set up dummy simulation function (returning an empty dataframe)
dummy_sim_fn <- function(object, inits, params, times, as.data.frame) {
 x <- tibble::tibble()
 return(x)
}

dummy_model <- function(){}

## Run scenario analysis
scenario_analysis(parameter_df, variable_params = "variable", model = dummy_model,
                  sim_fn = dummy_sim_fn, cores = 1, save = FALSE)
}
